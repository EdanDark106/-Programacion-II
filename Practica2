package algebravectorial;


public class AlgebraVectorial {
    private double x, y, z;

    public AlgebraVectorial() {
        this.x = 0;
        this.y = 0;
        this.z = 0;
    }

    public AlgebraVectorial(double x, double y, double z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }

    public double getX() { return x; }
    public void setX(double x) { this.x = x; }

    public double getY() { return y; }
    public void setY(double y) { this.y = y; }

    public double getZ() { return z; }
    public void setZ(double z) { this.z = z; }

    // Suma de vectores
    public AlgebraVectorial suma(AlgebraVectorial v) {
        return new AlgebraVectorial(this.x + v.x, this.y + v.y, this.z + v.z);
    }

    // Resta de vectores
    public AlgebraVectorial resta(AlgebraVectorial v) {
        return new AlgebraVectorial(this.x - v.x, this.y - v.y, this.z - v.z);
    }

    // Producto punto
    public double productoPunto(AlgebraVectorial v) {
        return this.x * v.x + this.y * v.y + this.z * v.z;
    }

    // Norma del vector
    public double norma() {
        return Math.sqrt(x * x + y * y + z * z);
    }

    // Producto cruz
    public AlgebraVectorial productoCruz(AlgebraVectorial v) {
        double cx = this.y * v.z - this.z * v.y;
        double cy = this.z * v.x - this.x * v.z;
        double cz = this.x * v.y - this.y * v.x;
        return new AlgebraVectorial(cx, cy, cz);
    }

    // Métodos para verificar perpendicularidad y paralelismo:

    // a) |a + b| = |a - b|
    public boolean esPerpendicularSumaResta(AlgebraVectorial v) {
        double sumaNorma = this.suma(v).norma();
        double restaNorma = this.resta(v).norma();
        return Math.abs(sumaNorma - restaNorma) < 1e-6;
    }

    // b) |a - b| = |b - a| (siempre verdadero, ya que la norma es positiva y simétrica)
    public boolean esPerpendicularDiferencia(AlgebraVectorial v) {
        return Math.abs(this.resta(v).norma() - v.resta(this).norma()) < 1e-6;
    }

    // c) a · b = 0
    public boolean esPerpendicularProductoPunto(AlgebraVectorial v) {
        return Math.abs(this.productoPunto(v)) < 1e-6;
    }

    // d) |a + b|^2 = |a|^2 + |b|^2 (ortogonalidad basada en la identidad del producto escalar)
    public boolean esPerpendicularNormaCuadrada(AlgebraVectorial v) {
        double sumaNormaCuadrada = Math.pow(this.suma(v).norma(), 2);
        double sumaCuadrados = Math.pow(this.norma(), 2) + Math.pow(v.norma(), 2);
        return Math.abs(sumaNormaCuadrada - sumaCuadrados) < 1e-6;
    }

    // e) Paralelo por escala r: a = r * b
    public boolean esParalelaPorEscalar(double r) {
        if (Math.abs(this.x) > 1e-6) {
            double rX = this.x / r;
            return Math.abs(this.y - rX * this.y) < 1e-6 && Math.abs(this.z - rX * this.z) < 1e-6;
        }
        return false; // Si x=0, la comprobación debe ser más detallada
    }

    // f) Paralelo por cruz (a x b = 0)
    public boolean esParalelaPorCruz(AlgebraVectorial v) {
        AlgebraVectorial cruz = this.productoCruz(v);
        return cruz.norma() < 1e-6;
    }

    // g) Proyección de a sobre b: (a · b / |b|^2) * b
    public AlgebraVectorial proyeccionSobre(AlgebraVectorial v) {
        double scalar = this.productoPunto(v) / Math.pow(v.norma(), 2);
        return new AlgebraVectorial(scalar * v.x, scalar * v.y, scalar * v.z);
    }

    // h) Componente de a en la dirección de b: (a · b / |b|)
    public double componenteEn(AlgebraVectorial v) {
        return this.productoPunto(v) / v.norma();
    }

    // toString
    @Override
    public String toString() {
        return String.format("(%f, %f, %f)", x, y, z);
    }

    // Ejemplo de uso
    public static void main(String[] args) {
        AlgebraVectorial v1 = new AlgebraVectorial(1, 0, 0);
        AlgebraVectorial v2 = new AlgebraVectorial(0, 1, 0);

        System.out.println("Vector 1: " + v1);
        System.out.println("Vector 2: " + v2);

        // Verificar perpendicularidad
        System.out.println("¿Son perpendiculares por producto punto? " + v1.esPerpendicularProductoPunto(v2));
        System.out.println("¿Son perpendiculares por norma? " + v1.esPerpendicularNormaCuadrada(v2));

        // Verificar paralelismo
        System.out.println("¿Son paralelos por cruz? " + v1.esParalelaPorCruz(v2));

        // Proyección
        System.out.println("Proyección de v1 sobre v2: " + v1.proyeccionSobre(v2));

        // Componente
        System.out.println("Componente de v1 en v2: " + v1.componenteEn(v2));
    }
}
